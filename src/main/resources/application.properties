#JPQL will adapt to the specific driver of sql we designate. So long as we use JPQL and not native queries, we can change the DB without problem.
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.datasource.url=jdbc:sqlserver://foodmaniaserver.database.windows.net:1433;database=dbfood;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;
spring.datasource.username=${TPusername}
spring.datasource.password=${TPpassword}
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto = none
spring.jpa.show-sql=true
#output to a temp_folder/file
logging.file.name=logs/application.log  

# Logging pattern for the console
logging.pattern.console= %d{yyyy-MM-dd HH:mm:ss} - %msg%n

# Logging pattern for file
logging.logback.rollingpolicy.file-name-pattern=MyLogs-%d{yyyy-MM-dd}.%i.log
#create: recreate tables every time we run app
#create-drop: do create and drop when we stop app (ideal for early testing)
#update: alter tables if there is a mismatch between model/db (ideal for development)
#validate: check if there is a mismatch and end the application if there is (ideal for production environment)
#none: do nothing (painful)